import { Vulnerability } from "@/types";
import { mockVulnerabilities } from "@/utils/mockData";

// Base API URL - would come from environment variables in a real app
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://api.nexasec.rw';

export async function fetchVulnerabilities(): Promise<Vulnerability[]> {
  try {
    // In a real app, this would be an actual API call
    const response = await fetch(`${API_URL}/api/vulnerabilities`);
    
    if (!response.ok) {
      throw new Error('Failed to fetch vulnerabilities');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error fetching vulnerabilities:', error);
    // Return mock data as fallback
    return mockVulnerabilities;
  }
}

export async function updateVulnerabilityStatus(id: string, status: string): Promise<Vulnerability> {
  try {
    const response = await fetch(`${API_URL}/api/vulnerabilities/${id}/status`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ status }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to update vulnerability status');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error updating vulnerability status:', error);
    throw error;
  }
}

export async function runVulnerabilityScan(): Promise<{ success: boolean, message: string }> {
  try {
    const response = await fetch(`${API_URL}/api/vulnerabilities/scan`, {
      method: 'POST',
    });
    
    if (!response.ok) {
      throw new Error('Failed to initiate vulnerability scan');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error initiating vulnerability scan:', error);
    throw error;
  }
} 